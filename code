section .data
    quest db 'DIGITE A QUANTIDADE DE DISCOS: ' ,0xa
    len equ $-quest                                     
    
    conq db 'Concluído!', 0xa
    len2 equ $-conq
    
    
    qtd_mov :
                          db        "A quantidade minima de movimentos é: "
        movimentos:       db        " " , 0xa
        len3              equ       $-qtd_mov
        
    texto:

                          db        "Mova o disco "
        num:              db        " "
                          db        " do topo da torre: "
        torre_origem:     db        " "  
                          db        " para a torre "     
        torre_destino:    db        " ", 0xa  
        lenght            equ       $-texto


; declaração de variaveis não inicializadas
section .bss

    discos resb 3                ; Armazenamento de dados não inicializado

section .text

    global _start

    _start:                             

        mov edx,len                     ; recebe o tamanho da mensagem
        mov ecx,quest                   ; recebe a pergunta 'quest'
        mov ebx,1                       ; entrada padrão 
        mov eax,4                       ; informa que será uma escrita no terminal
        int 0x80                        ; Interrupção Kernel Linux

        ;input do usuario 
        mov edx, 3                      ; tamanho do input
        mov ecx, discos                 ; armazenamento em 'discos'
        mov ebx, 0                      ; entrada padrão
        mov eax, 3                      ; informa que sera uma leitura   
        int 0x80                        ; Interrupção Kernel Linux
        
        mov edx, discos                 ; Move o endereço da quantidade de discos para edx
        call    strtoi

        push dword "B"                  
        push dword "C"                  
        push dword "A"
        push eax                       

        call Hanoi     
        
        mov edx, len2                 
        mov ecx, conq                 
        mov ebx, 1                      
        mov eax, 4
        int 0x80
        

        ; FIM DO PROGRAMA
        mov eax, 1                      ; Saida do sistema
        mov ebx, 0                      ; saida padrão  
        int 0x80                        ; Interrupção Kernel Linux
   

; conversão de string para inteiro

strtoi:
    xor     eax, eax                    ;
    mov     ebx, 10                     ; EBX vai ser o registrador auxiliar de multiplicação.
    
    .loop:
        movzx   ecx, byte [edx]         ; Mover um byte de EDX para ECX. [Representando um 'numero']
        inc     edx                     ; Aumenta o EDX para que aponte para o proximo byte.
        cmp     ecx, '0'                ; Comparar ECX com '0'
        jb      .done                   ; Caso for menor, pule pra linha .done
        cmp     ecx, '9'                ; Comparar ECX com '9'
        ja      .done                   ; Caso for maior, pule pra linha .done
        
        sub     ecx, '0'                ; Subtrai a "string" de 'zero', irá "transformar em int"
        imul    eax, ebx                ; Multiplica por EBX, na primeira interação resultado ao!
        add     eax, ecx                ; Adiciona o valor de ECX que foi "convertido" a EAX
        jmp     .loop                   ; Fazer isso até chegar em uma das comparações acima.
    
    .done:
        ret 


    Hanoi:
        push ebp                        ; salva o registrador ebp na pilha
        mov ebp,esp                     ; ebp recebe o endereço do topo da pilha

        mov eax,[ebp+8]                 ; move para eax o primeiro elemento da fila(numero de discos)
        cmp eax,0x0                     ; cmp faz o comparativo do valor que estar em eax com 0
        jle feito                       ; se eax for menor ou igual a 0, vai para o fim, desempilhar
        

        dec eax                         ; diminui 1 de eax
        push dword [ebp+16]             ; coloca na pilha a torre auxiliar 
        push dword [ebp+20]             ; coloca na pilha a torre destino
        push dword [ebp+12]             ; coloca na pilha a torre origem
        push dword eax                  ; poe eax na pilha como parâmetro n, já com -1 para a recursividade
        call Hanoi                      ; chama a função novamente (recursividade)

        add esp,12                      ; libera mais 12 bits de espaço (20 - 8) Último e primeiro parâmetro
        push dword [ebp+16]             ; pega o pino de origem referenciado pelo parâmetro ebp+16
        push dword [ebp+12]             ; coloca na pilha o pino de origem
        push dword [ebp+8]              ; coloca na pilha o pino de o numero de disco inicial
        call print                      ; chama a função imprime


        add esp,12                      ; libera mais 12 bits de espaço (20 - 8) Último e primeiro parâmetro
        push dword [ebp+12]             ; coloca na pilha o pino de origem
        push dword [ebp+16]             ; coloca na pilha o pino de trabalho
        push dword [ebp+20]             ; coloca na pilha o pino de destino
        mov eax,[ebp+8]                 ; move para o registrador eax o espaço reservado ao número de discos atuais
        dec eax                         ; decrementa 1 de eax

        push dword eax                      ; poe eax na pilha
        call Hanoi                      ; recursividade dword eax                     

    feito:

        mov esp,ebp                     ; Move o valor de ebp para esp (guarda em outro registrador)
        pop ebp                         ; Remove da pilha (desempilha) o ebp
        ret                             ; Retorna a função de origem (antes de ter chamado a função 'feito')

    print:
        
        push ebp                        ; Empilha
        mov ebp, esp                    ; ebp recebe o endereÃ§o do topo da pilha
        
        
        mov eax, [ebp + 12]             ; pino de trabalho          
        mov [torre_origem], al           ; movimento: movendo o conteudo de al para [torre_origem]
        
        mov eax, [ebp + 8]              ; disco atual
        add al, '0'                     ; conversão ascii
        mov [num], al                   ; mov o conteudo de al para [num]
        
        mov eax, [ebp + 16]             ; pino de destino** 
        mov [torre_destino], al          ; movimento: movendo o conteudo de al para [torre_destino]

        mov edx, lenght                 ; tamanho do texto formatada
        mov ecx, texto                  ; texto formatado
        mov ebx, 1                      ; dá permissão para a saida
        mov eax, 4                      ; informa que será uma escrita no terminal
        int 0x80                        ; Interrupção para kernel do linux

        mov     esp, ebp                ; Copiando o valor do registrador EBP para o ESP
        pop     ebp                     ; Recupera valor do topo da pilha para o registrador EBP
        ret                             ; retornar ao chamador
